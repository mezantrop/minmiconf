#!/bin/sh

# ---------------------------------------------------------------------------- #
# Note, this is not an autotools configure script, Minimum Minimorum Configure #
# (MinMiCon) script is written for my humble needs to set values in a Makefile #
# ---------------------------------------------------------------------------- #

# -- Script variables -------------------------------------------------------- #
DEBUG="y"


# ---------------------------------------------------------------------------- #
init() {
    # -- Makefile variables to be set ---------------------------------------- #
    WITH_TCP_NODELAY=${WITH_TCP_NODELAY=1}
    USER=${USER=`whoami`}
    PREFIX=${PREFIX=`detect_path "/opt /usr/local $HOME" "dr"`}

    # -- Action variables ---------------------------------------------------- #
    SET_VARS="WITH_TCP_NODELAY USER PREFIX"

    # PREFIX WITH_LIBSSH2
}

# ---------------------------------------------------------------------------- #
ifdebug() {

    #
    # Check debug mode - DEBUG variable is set to:
    #   - "yY" or "[1-9]" and return 0
    #   - "nN" or 0 and return 1
    #  On any error return 2
    #

    case "$DEBUG" in
        0|[nN])        return 1 ;;
        [1-9]|[yY])    return 0 ;;
        *)             return 2 ;;
    esac
}

# ---------------------------------------------------------------------------- #
dprintf() {
    #
    # Print a message from $* if in debug mode
    #

    ifdebug && printf "DEBUG: %s\n" "$*" >&2
}

# ---------------------------------------------------------------------------- #
detect_path() {
    #
    # Detect a valid path from a list
    #
    # $1 - Space separated path specifications
    # $2 - permissions to check (dfrwx)
    # Output: Prints the first matched path or empty string on error
    # Return: 0 - on success, 1 on failure or error
    #

    _path="$1"
    # Prepare permissions string for iteration: "DRWX" -> "d r w x "
    _prms="`echo "$2" |
        sed -e 's/\([a-z]\)/\1 /g' \
            -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`"

    for _p in $_path; do
        _inp=0
        _acp=0
        ifdebug && _dout=""
        dprintf "detect_path(): Checking: [$_p]"
        for _prm in $_prms; do
            case "$_prm" in
                *d*)
                    _inp=`expr $_inp + 1`
                    [ -d "$_p" ] && {
                        _acp=`expr $_acp + 1`
                        ifdebug && _dout="$_dout""d"
                    } || break
                ;;

                *f*)
                    _inp=`expr $_inp + 10`
                    [ -f "$_p" ] && {
                        _acp=`expr $_acp + 10`
                        ifdebug && _dout="$_dout""f"
                    } || break
                ;;

                *r*)
                    _inp=`expr $_inp + 100`
                    [ -r "$_p" ] && {
                        _acp=`expr $_acp + 100`
                        ifdebug && _dout="$_dout""r"
                    } || break
                ;;

                *w*)
                    _inp=`expr $_inp + 1000`
                    [ -w "$_p" ] && {
                        _acp=`expr $_acp + 1000`
                        ifdebug && _dout="$_dout""w"
                    } || break
                ;;

                *x*)
                    _inp=`expr $_inp + 10000`
                    [ -x "$_p" ] && {
                        _acp=`expr $_acp + 10000`
                        ifdebug && _dout="$_dout""x"
                    } || break
                ;;

                *)
                    dprintf "detect_path(): Path: wrong permissions argument"
                    echo ""; return 1
                ;;
            esac
        done

        [ $_inp -eq $_acp ] && {
            dprintf "detect_path(): Valid path: [$_dout] [$_p]"
            echo $_p; return 0;
        } ||
            dprintf "detect_path(): NOT valid: [$_p] Score: $_inp/$_acp"
    done

    dprintf "detect_path(): No valid path detected"
    echo ""; return 1
}

# ---------------------------------------------------------------------------- #
write_vars() {
    #
    # Write variables and their values into a file
    #
    # $1 - a string containing space separated variable names
    # $2 - a file to write or (update) the variables
    #

    _vars=$1
    _file=$2
    _var_rgx="^[:space:]*"
    _val_rgx="[:space:]*[a-zA-Z0-9[:punct:]]*"

    for i in $_vars; do
        _var="$i"
        _val="`eval echo '$'{$i}`"

        # Find if variable is in the file
        [ "`grep "$_var_rgx$_var=$_vrgx" "$_file"`" ] && {
            # Update the variable value...
            dprintf "write_vars(): Updating [$_var] = [$_val] > [$_file]"
            sed -i '' 's|'"$_var_rgx"''"$_var"'='"$_val_rgx"'|'"$_var"'='"$_val"'|' $_file
        } || {
            # ... or initiate it with the value
            dprintf "write_vars(): Creating [$_var] = [$_val] > [$_file]"
            _f=`cat $_file`
            printf "%s=%s\n%s" "$_var" "$_val" "$_f" > $_file
        }
    done
}

# ---------------------------------------------------------------------------- #
init

write_vars "$SET_VARS" "mfile"

# echo OUT $PREFIX
